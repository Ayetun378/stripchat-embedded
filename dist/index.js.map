{"version":3,"file":"index.js","sources":["../src/player.js","../src/index.js"],"sourcesContent":["function onImageLoaded(streamImage) {\n  // Skip drawing image if it was loaded later than previous one drawn or was not loaded at all\n  if (streamImage.src === ''\n    || streamImage.queueIndex < this.loader.lastDrawnIndex\n  ) {\n    console.info('Stripchat Player :: Skip of successfully loaded image');\n\n    return;\n  }\n\n  if (!this.canvasRef) {\n    return;\n  }\n\n  this.loader.lastDrawnIndex = streamImage.queueIndex;\n\n  if (this.successHandler(streamImage) === false) {\n    return;\n  }\n\n  var context = this.canvasRef.getContext('2d');\n\n  if (this.canvasRef.width > 0\n    && this.canvasRef.height > 0\n    && streamImage\n  ) {\n    var canvasSize = cropCanvas(streamImage, this.containerSize);\n\n    this.canvasRef.width = this.containerSize.width;\n    this.canvasRef.height = this.containerSize.height;\n\n    context.clearRect(\n      0,\n      0,\n      this.containerSize.width,\n      this.containerSize.height\n    );\n\n    context.drawImage(\n      streamImage,\n      canvasSize.canvasWidthOffset,\n      canvasSize.canvasHeightOffset,\n      // Image size\n      canvasSize.canvasWidth,\n      canvasSize.canvasHeight,\n      0,\n      0,\n      this.canvasRef.width,\n      this.canvasRef.height\n    );\n  }\n}\n\nfunction onImageError(streamImage) {\n  if (!this.loader.queue) {\n    return;\n  }\n\n  console.warn('Stripchat Player :: Image loading error');\n\n  this.unmount();\n\n  this.errorHandler(streamImage);\n}\n\nfunction createImage() {\n  var image = new Image();\n\n  image.setAttribute('crossOrigin', 'anonymous');\n  image.onLoadListener = onImageLoaded.bind(this, image);\n  image.onErrorListener = onImageError.bind(this, image);\n  image.addEventListener('load', image.onLoadListener);\n  image.addEventListener('error', image.onErrorListener);\n\n  return image;\n}\n\nfunction cropCanvas(streamImage, containerSize) {\n  var imageHeight = streamImage.height;\n  var imageWidth = streamImage.width;\n\n  if (!containerSize) {\n    return {\n      canvasWidth: imageWidth,\n      canvasHeight: imageHeight,\n      canvasWidthOffset: 0,\n      canvasHeightOffset: 0\n    };\n  }\n\n  var containerHeight = containerSize.height;\n  var containerWidth = containerSize.width;\n\n  var scale = Math.max(containerWidth / imageWidth, containerHeight / imageHeight);\n  var newWidth = imageWidth * scale;\n  var newHeight = imageHeight * scale;\n\n  var widthDiff = (newWidth - containerWidth) /  scale;\n  var heightDiff = (newHeight - containerHeight) / scale;\n\n  var canvasWidth = imageWidth - widthDiff;\n  var canvasHeight = imageHeight - heightDiff;\n\n  var canvasWidthOffset = widthDiff / 2;\n  var canvasHeightOffset = heightDiff / 2;\n\n  return {\n    canvasWidth: canvasWidth,\n    canvasHeight: canvasHeight,\n    canvasWidthOffset: canvasWidthOffset,\n    canvasHeightOffset: canvasHeightOffset\n  };\n}\n\nfunction streamImageUrl(modelId, snapshotServer, modelToken) {\n  var protocol = location.protocol === 'http:'\n    ? 'http'\n    : 'https';\n\n  return protocol + '://c-' + snapshotServer + '.stripcdn.com/snapshot/' + modelId + '?token=' + modelToken + '&_=' + (new Date()).valueOf();\n}\n\nfunction enqueueImage() {\n  if (!this.loader.queue) {\n    return;\n  }\n\n  var streamImage = this.loader.queue.shift();\n\n  streamImage.src = streamImageUrl(this.modelId, this.snapshotServer, this.modelToken);\n  streamImage.queueIndex = this.loader.lastQueuedIndex;\n\n  this.loader.lastQueuedIndex += 1;\n  this.loader.queue.push(streamImage);\n}\n\nfunction Player() {\n  this.canvasRef = null;\n  this.fps = 10;\n\n  this.modelId = '';\n  this.modelToken = '';\n  this.snapshotServer = '';\n\n  this.successHandler = function () {};\n  this.errorHandler = function () {};\n\n  this.queueSize = 30;\n  this.loader = {};\n\n  this.paused = false;\n}\n\nPlayer.prototype.setCanvasRef = function (canvasRef) {\n  if (!(canvasRef instanceof HTMLCanvasElement)) {\n    throw new Error('Stripchat Player :: setCanvasRef accepts only canvas elements');\n  }\n\n  this.canvasRef = canvasRef;\n\n  return this;\n};\n\nPlayer.prototype.setModelId = function (modelId) {\n  this.modelId = modelId.toString();\n\n  return this;\n};\n\nPlayer.prototype.setModelToken = function (modelToken) {\n  this.modelToken = modelToken.toString();\n\n  return this;\n};\n\nPlayer.prototype.setModelSnapshotServer = function (snapshotServer) {\n  this.snapshotServer = snapshotServer.toString();\n\n  return this;\n};\n\nPlayer.prototype.setFps = function (fps) {\n  this.fps = Number(fps);\n\n  return this;\n};\n\nPlayer.prototype.setSuccessHandler = function (successHandler) {\n  if (!(successHandler instanceof Function)) {\n    throw new Error('Stripchat Player :: setSuccessHandler accepts only functions');\n  }\n\n  this.successHandler = successHandler;\n\n  return this;\n};\n\nPlayer.prototype.setErrorHandler = function (errorHandler) {\n  if (!(errorHandler instanceof Function)) {\n    throw new Error('Stripchat Player :: setErrorHandler accepts only functions');\n  }\n\n  this.errorHandler = errorHandler;\n\n  return this;\n};\n\nPlayer.prototype.initLoader = function () {\n  this.loader = {\n    queue: [],\n    interval: null,\n    intervalTime: Math.round(100 / this.fps) * 10,\n    lastQueuedIndex: 0,\n    lastDrawnIndex: 0\n  };\n\n  return this;\n};\n\nPlayer.prototype.initQueue = function () {\n  var images = [];\n\n  for (var i = 0; i < this.queueSize; i++) {\n    images.push(\n      createImage.call(this)\n    );\n  }\n\n  this.loader.queue = images;\n\n  return this;\n};\n\nPlayer.prototype.initInterval = function () {\n  this.loader.intervalTimer = function() {\n    if (!this.paused) {\n      enqueueImage.call(this);\n    }\n\n    this.loader.interval = setTimeout(\n      this.loader.intervalTimer,\n      this.loader.intervalTime\n    );\n  }.bind(this);\n\n  return this;\n};\n\nPlayer.prototype.init = function () {\n  this.containerSize = {\n    height: this.canvasRef.offsetHeight,\n    width: this.canvasRef.offsetWidth\n  };\n\n  return this\n    .initLoader()\n    .initQueue()\n    .initInterval();\n};\n\nPlayer.prototype.mount = function () {\n  if (!this.canvasRef) {\n    throw new Error('Stripchat Player :: canvas element was not specified');\n  }\n\n  this.init();\n\n  this.loader.intervalTimer();\n\n  return this;\n};\n\nPlayer.prototype.unmount = function () {\n  if (this.loader.queue) {\n    this.loader.queue.forEach(function (element, index, queue) {\n      queue[index].src = '';\n      queue[index].removeEventListener('load', queue[index].onLoadListener);\n    });\n\n    if (this.loader.interval !== null) {\n      clearTimeout(this.loader.interval);\n      this.loader = {};\n    }\n  }\n\n  this.loader = {};\n\n  return this;\n};\n\nPlayer.prototype.pause = function () {\n  this.paused = true;\n\n  return this;\n};\n\nPlayer.prototype.play = function () {\n  this.paused = false;\n};\n\nmodule.exports = Player;\n","var player = require('./player');\n\nmodule.exports = {\n  StripchatPlayer: player,\n};\n"],"names":["onImageLoaded","streamImage","src","queueIndex","this","loader","lastDrawnIndex","console","info","canvasRef","successHandler","context","getContext","width","height","canvasSize","containerSize","imageHeight","imageWidth","canvasWidth","canvasHeight","canvasWidthOffset","canvasHeightOffset","containerHeight","containerWidth","scale","Math","max","widthDiff","heightDiff","cropCanvas","clearRect","drawImage","createImage","image","Image","setAttribute","onLoadListener","bind","onErrorListener","queue","warn","unmount","errorHandler","addEventListener","enqueueImage","shift","location","protocol","snapshotServer","modelId","modelToken","Date","valueOf","lastQueuedIndex","push","Player","fps","queueSize","paused","prototype","setCanvasRef","HTMLCanvasElement","Error","setModelId","setModelToken","setModelSnapshotServer","setFps","setSuccessHandler","Function","setErrorHandler","initLoader","interval","intervalTime","round","initQueue","images","i","call","initInterval","intervalTimer","setTimeout","init","offsetHeight","offsetWidth","mount","forEach","element","index","removeEventListener","clearTimeout","pause","play","StripchatPlayer"],"mappings":"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"}